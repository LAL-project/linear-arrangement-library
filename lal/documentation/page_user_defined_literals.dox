/*********************************************************************
 *
 * Linear Arrangement Library - A library that implements a collection
 * algorithms for linear arrangments of graphs.
 *
 * Copyright (C) 2019 - 2024
 *
 * This file is part of Linear Arrangement Library. The full code is available
 * at:
 *      https://github.com/LAL-project/linear-arrangement-library.git
 *
 * Linear Arrangement Library is free software: you can redistribute it
 * and/or modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Linear Arrangement Library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Linear Arrangement Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact:
 *
 *     Llu√≠s Alemany Puig (lluis.alemany.puig@upc.edu)
 *         LQMC (Quantitative, Mathematical, and Computational Linguisitcs)
 *         CQL (Complexity and Quantitative Linguistics Lab)
 *         Jordi Girona St 1-3, Campus Nord UPC, 08034 Barcelona.   CATALONIA, SPAIN
 *         Webpage: https://cqllab.upc.edu/people/lalemany/
 *
 *     Juan Luis Esteban (esteban@cs.upc.edu)
 *         LOGPROG: Logics and Programming Research Group
 *         Office 110, Omega building
 *         Jordi Girona St 1-3, Campus Nord UPC, 08034 Barcelona.   CATALONIA, SPAIN
 *         Webpage: https://www.cs.upc.edu/~esteban/
 *
 *     Ramon Ferrer i Cancho (rferrericancho@cs.upc.edu)
 *         LQMC (Quantitative, Mathematical, and Computational Linguisitcs)
 *         CQL (Complexity and Quantitative Linguistics Lab)
 *         Office 220, Omega building
 *         Jordi Girona St 1-3, Campus Nord UPC, 08034 Barcelona.   CATALONIA, SPAIN
 *         Webpage: https://cqllab.upc.edu/people/rferrericancho/
 *
 ********************************************************************/

/** \page LAL_UDLS User-defined literals in LAL

\section LAL_UDLS_tree_notation Construction of trees from head vectors

The C++ implementation of the library, offers three quick and useful ways of constructing free and rooted trees in a single line using head vectors (see @ref LAL_concepts__head_vector for a definition of head vectors).

To start with, recall that there exist functions that convert a head vector into a free tree (see @ref lal::graphs::from_head_vector_to_free_tree) or a rooted tree (see @ref lal::graphs::from_head_vector_to_rooted_tree). The former returns a pair of @ref lal::graphs::free_tree and @ref lal::node, and the latter a @ref lal::graphs::rooted_tree.

@code
const std::pair<lal::graphs::free_tree, lal::node> tree_and_root = lal::graphs::from_head_vector_to_free_tree({0,1,1,1,1,1,1});
const lal::graphs::rooted_tree tree = lal::graphs::from_head_vector_to_rooted_tree({0,1,1,1,1,1,1});
@endcode

In LAL there are defined two literal types to ease the construction of these objects.
@code
const std::pair<lal::graphs::free_tree, lal::node> tree_and_root = "0 1 1 1 1 1 1"_pfree_tree;
const lal::graphs::rooted_tree tree = "0 1 1 1 1 1 1"_rooted_tree;
@endcode

<b> Attention! </b> Notice the <b>p</b> before <i>free_tree</i> in the literal.

Since, when creating a free tree, we often only want the tree structure (and ignore the root denoted explicitly in the head vector with the '0' character), users can write

@code
const lal::graphs::free_tree tree_and_root = "0 1 1 1 1 1 1"_pfree_tree.first;
@endcode

or simply

@code
const lal::graphs::free_tree tree_and_root = "0 1 1 1 1 1 1"_free_tree;
@endcode

<b> Attention! </b> Notice that there is no <b>p</b> before <i>free_tree</i> in this literal.

*/
