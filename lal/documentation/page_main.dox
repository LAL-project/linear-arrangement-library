/*********************************************************************
 *
 *  Linear Arrangement Library - A library that implements a collection
 *  algorithms for linear arrangments of graphs.
 *
 *  Copyright (C) 2019 - 2021
 *
 *  This file is part of Linear Arrangement Library. The full code is available
 *  at:
 *      https://github.com/LAL-project/linear-arrangement-library.git
 *
 *  Linear Arrangement Library is free software: you can redistribute it
 *  and/or modify it under the terms of the GNU Affero General Public License
 *  as published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  Linear Arrangement Library is distributed in the hope that it will be
 *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with Linear Arrangement Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Contact:
 *
 *      Llu√≠s Alemany-Puig (lalemany@cs.upc.edu)
 *          LARCA (Laboratory for Relational Algorithmics, Complexity and Learning)
 *          CQL (Complexity and Quantitative Linguistics Lab)
 *          Jordi Girona St 1-3, Campus Nord UPC, 08034 Barcelona.   CATALONIA, SPAIN
 *          Webpages:
 *              https://cqllab.upc.edu/people/lalemany/
 *              https://www.researchgate.net/profile/Lluis_Alemany-Puig
 *
 *     Juan Luis Esteban (esteban@cs.upc.edu)
 *          Office 110, Omega building
 *          Jordi Girona St 1-3, Campus Nord UPC, 08034 Barcelona.   CATALONIA, SPAIN
 *          Webpages:
 *              https://www.cs.upc.edu/~esteban/
 *              https://www.researchgate.net/profile/Juan_Esteban13
 * 
 *      Ramon Ferrer-i-Cancho (rferrericancho@cs.upc.edu)
 *          LARCA (Laboratory for Relational Algorithmics, Complexity and Learning)
 *          CQL (Complexity and Quantitative Linguistics Lab)
 *          Office S124, Omega building
 *          Jordi Girona St 1-3, Campus Nord UPC, 08034 Barcelona.   CATALONIA, SPAIN
 *          Webpages:
 *              https://cqllab.upc.edu/people/rferrericancho/
 *              https://www.researchgate.net/profile/Ramon_Ferrer-i-Cancho
 *
 ********************************************************************/

/** \mainpage Documentation of the Linear Arrangement Library

This library offers a variety of algorithms related to linear arrangements of graphs so as to provide researchers in the field of Quantitative Linguistics with a toolset with which they can perform statistical analyses on different corpora of treebanks efficiently and effectively. Therefore, this library implements several state-of-the-art algorithms and offers a variety of functionalities. While most of the functions have been generalised to be applicable to general graphs, we also provide specialised functions for trees, which are more efficient than their more general counterparts.

The main goal of this library is to provide algorithms with which the library's users can use to do statistical studies. One of the most attractive features offered in this library is that of treebank collection processing. This library offers a class that automatically processes a collection and computes several metrics based on the capabilities of the library. See class @ref lal::io::treebank_collection_processor and @ref lal::io::treebank_processor for details. We also provide classes for custom processing of treebanks (see @ref lal::io::treebank_collection_reader and @ref lal::io::treebank_reader).

All the features of syntactic dependency trees that can be calculated with the algorithms in this library are gathered in the namespaces @ref lal::linarr and in @ref lal::properties. These features include, but are not limited to,
- the sum of edge lengths \f$D\f$ (see @ref lal::linarr::sum_edge_lengths), and the expectation and variance of the sum of edge lengths (see @ref lal::properties::exp_sum_edge_lengths and lal::properties::var_sum_edge_lengths),
- the computation of optimal arrangements: unconstrained minimum arrangements with respect to the sum of edge lengths (see @ref lal::linarr::min_sum_edge_lengths), with free choice on the algorithm to be used (see @ref lal::linarr::algorithms_Dmin), and the computation of minimum planar arrangements (see @ref lal::linarr::min_sum_edge_lengths_planar) and of minimum projective arrangements (see @ref lal::linarr::min_sum_edge_lengths_projective).
- the number of crossings (see @ref lal::linarr::num_crossings), and the expectation and variance of the number of crossings (see @ref lal::properties::exp_num_crossings and lal::properties::var_num_crossings),
- any moment of the degree of the vertices of a graph (see @ref lal::properties::moment_degree and its variants),
- the mean dependency distance (see @ref lal::linarr::mean_dependency_distance),
- the mean dependency distance over ensembles of graphs (see @ref lal::linarr::mean_dependency_distance_1level and @ref lal::linarr::mean_dependency_distance_2level),
- the mean hierarchical distance (see @ref lal::properties::mean_hierarchical_distance),
- the headedness of a tree (see @ref lal::linarr::head_initial),
- the type of syntactic dependency trees according to their projectivity (see @ref lal::linarr::syntactic_dependency_structure_class).
- calculation of the centre of a tree (see @ref lal::properties::tree_centre), the centroid of a tree (see @ref lal::properties::tree_centroid), a tree's diameter (see @ref lal::properties::tree_diameter).

As extra features, useful for experimentation, are the generation of different types of trees, all of which are available in the @ref lal::generate namespace. We have implemented existing techniques (cited accordingly) or made or own to enumerate
- all labelled/unlabelled free trees,
- all labelled/unlabelled rooted trees,
- all projective arrangements of rooted trees,
- all planar arrangements of free trees,

and to generate uniformly at random
- labelled/unlabelled free/rooted trees,
- projective arrangements of rooted trees.
- planar arrangements of free trees.

The documentation of each class includes usage examples.

This library implements several types of graphs that can be found in the @ref lal::graphs namespace.

\section MP_basic_DS The basic data structures in this library

In order to be able to use the library comfortably, its users must take good note of the different data structures that are the library's core.

With LAL, most metrics can be calculated as exact rational numbers (see @ref lal::numeric::rational), but also as floating point values of double precision. For the former, add the suffix '_rational' at the end of the function name. For example, the function @ref lal::properties::var_num_crossings returns the variance of the number of crossings 'C' as a floating point value. By adding the suffix, i.e., @ref lal::properties::var_num_crossings_rational, we obtain said variance as an exact rational value. To see what a rational value is in the context of this library, see the documentation of the namespace @ref lal::numeric.

\subsection MP_basic_DS_integer_rational Exact integer and rational arithmetic

Most operations in this library are done using exact integer and rational arithmetic. Such arithmetic is powered by the GMP library (see \cite GMP_library). We have wrapped their C structures into the classes @ref lal::numeric::integer and @ref lal::numeric::rational.

\subsection MP_basic_DS_graphs The different types of graphs

As it should be expected, this library offers a number of different graph abstractions: undirected graphs (see @ref lal::graphs::undirected_graph), directed graphs (see @ref lal::graphs::directed_graph), free trees (see @ref lal::graphs::free_tree) and roted trees (see @ref lal::graphs::rooted_tree), all of which can be found within the @ref lal::graphs namespace.

\subsubsection MP_basic_DS_graphs_internal The internal structure of graphs

Although all graphs should be regarded as unlabelled, each node carries an implicit labelling. Such labelling has a most trivial nature since each node is labelled with a number between 0 and the total number of vertices minus one.

Due to most graphs being sparse, the data structure of choice are adjacency lists where each vertex has a list of neighbouring nodes, or simply neighbours, associated to it. The user can affect the order of appearance of neighbours in multiple ways. One of them is, evidently, the order in which edges are added. Another way is via the @ref lal::graphs::graph::normalise function, which sorts every list of neighbours increasingly by index. By default, the addition of edges is normalising, namely the following code

@code
lal::graphs::free_tree t(4);
t.add_edge(0,1,false,false).add_edge(0,3,false,false).add_edge(0,2,false,false);
t.normalise();
cout << t << endl;
@endcode

produces the same output as

@code
lal::graphs::free_tree t(4);
t.add_edge(0,1).add_edge(0,3).add_edge(0,2);
cout << t << endl;
@endcode

which is

@verbatim
0: 1 2 3
1: 0
2: 0
3: 0
@endverbatim

The output is easy to interpret: the first line indicates the nodes are incident to vertex 0, the second line indicates the nodes incident to vertex 1, and so on. Without normalisation (neither the call to @ref lal::graphs::free_tree::normalise, and using 'false' in the optional parameters), the output is

@verbatim
0: 1 3 2
1: 0
2: 0
3: 0
@endverbatim

where only the first line changes.

Such normalisation is required by some of the algorithms in this library. Without proper normalisation, the algorithms are not likely to compute correct values. The parameter that governs the graphs' normalisation is called the normalisation parameter.

The adjacency list structure has been extended to directed graphs in a way that the user can query them for in-degree (see @ref lal::graphs::directed_graph::get_in_degree) and in-neighbours (see @ref lal::graphs::directed_graph::get_in_neighbours).

\section MP_terminology Basic terminology and notation

<b>NOTE</b> Pages @ref LAL_notation and @ref LAL_concepts further explain everything there is to know about notation and concepts.

Users will note, after browsing through the library's documentation, that several concepts are quite ubiquitous. The @ref lal::node type is simply a typedef of an unsigned integer type, and the @ref lal::edge type is simply a STL's pair of nodes. Moreover, users need to have a deep understanding of what a head vector is (see @ref lal::head_vector), which is what allows users to easily read trees from files and process a file containing a large collection of trees (see @ref lal::io namespace).

A more advanced concept is that of linear arrangement (see @ref lal::linear_arrangement). In this library, a linear arrangement is viewed as a function that relates each node to a position in a linear sequence. Due to the properties of such functions, a linear arrangement is implemented with the STL's vector. Note that the concept of linear arrangement has been detached from that of trees, and the pair of a linear arrangement and a tree forms, in the context of the library, a syntactic dependency tree (this is why this class is not implemented). The symbol of choice for representing a linear arrangement in the library is the greek letter for the number pi \f$\pi\f$.

Now, many functions (see those fuctions within the @ref lal::linarr namespace) admit a linear arrangement which can be empty. Whenever it is empty, i.e., the value of the parameter is an empty vector, the positions of the nodes of the graphs in question are given by their implicit label. Such empty arrangement is called, in the context of the library, the identity arrangement symbolised with \f$\pi_I\f$. Therefore, the following measurement of the sum of the lengths of the edges are equivalent

@code
lal::graphs::free_tree t(4);
t.add_edges({lal::edge(0,1), lal::edge(1,2), lal::edge(2,3)});
uint64_t D1 = lal::linarr::sum_edge_lengths(t);
uint64_t D2 = lal::linarr::sum_edge_lengths(t, {0,1,2,3});
@endcode

The possibility of expliciting a linear arrangement increases the flexibility of the library. For example, for the purposes of illustration, one can calculate the expected sum of the length of the edges as follows

@code
lal::graphs::free_tree t(4);
t.add_edges({lal::edge(0,1), lal::edge(1,2), lal::edge(2,3)});
lal::numeric::rational Dt = 0;
lal::linear_arrangement arr({0,1,2,3});
do {
	arr.update_inverse();
	Dt += lal::linarr::sum_edge_lengths(t, arr);
}
while (std::next_permutation(arr.begin_direct(), arr.end_direct()));
Dt /= 24;
@endcode

\section MP_effective_usage Using the library effectively

As a rule of the thumb, the user is encouraged not to change the default value of the parameters whenever they are given. However, certain operations can be less efficient than others, and sometimes it is even desirable to use values different from the default ones.

One the one hand, the wrong choice of operation can affect the library's performance gravely. For example, the addition/deletion of edges to/from graphs is slower when it is done edge by edge than when it is done in bulk. Users are highly encouraged to add/delete them in bulk using the appropriate functions (see, for example, @ref lal::graphs::undirected_graph::add_edges and @ref lal::graphs::undirected_graph::remove_edges). Although correct, the following code is discouraged

@code
lal::graphs::free_tree t(10);
lal::node u, v;
for (int i = 0; i < 9; ++i) {
	cin >> u >> v;
	t.add_edge(u,v);
}
@endcode

while the next piece of code is strongly encouraged whenever possible

@code
lal::graphs::free_tree t(10);
vector<lal::edge> e(9);
for (int i = 0; i < 9; ++i) {
	cin >> e[i].first >> e[i].second;
}
t.set_edges(e);
@endcode

A similar reasoning should be applied to the deletion of edges.

Furthermore, graphs are seldom required to be normalised. For example, when calculating the variance of \f$C\f$ (see @ref lal::properties::var_num_crossings), it is mandatory that the graph be normalised, namely, the function has a precondition that requires the graph to be normalised. If such a function is to be called eventually then add all edges in bulk and with normalisation, or read the graph from disk also with normalisation. However, if such functions will never be called then the users are encouraged to set the normalisation parameter to false. For example, if the variance of \f$C\f$ is to be calculated,

@code
const string filename = "..."; // a valid name of a file
const lal::graphs::free_tree t = *lal::io::read_edge_list(filename);
double var_C = lal::properties::var_num_crossings(t);
@endcode

but if not

@code
const string filename = "..."; // a valid name of a file
const lal::graphs::free_tree t = *lal::io::read_edge_list(filename, false);
// ...
@endcode
*/
